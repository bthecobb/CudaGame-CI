name: CudaGame CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [11, 17]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile
      
    - name: Run JUnit tests
      run: mvn test -Pjunit-only
      
    - name: Run TestNG tests
      run: mvn test -Ptestng-only
      
    - name: Run Integration tests
      run: mvn verify -DskipUnitTests
      
    - name: Generate test report
      if: always()
      run: mvn surefire-report:report
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-java${{ matrix.java }}
        path: |
          target/surefire-reports/
          target/failsafe-reports/
          
    - name: Generate Allure Report
      if: always()
      run: mvn allure:report
      
    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: allure-report-${{ matrix.os }}-java${{ matrix.java }}
        path: target/site/allure-maven-plugin/
        
  code-coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Run tests with coverage
      run: mvn clean test jacoco:report
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Generate coverage badge
      run: |
        echo "Coverage report generated"
        # You can add a script here to generate coverage badges
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: owasp-report
        path: target/dependency-check-report.html
        
  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Run performance tests
      run: |
        mvn test -Dgroups=performance
        
    - name: Analyze performance results
      run: |
        echo "Performance test results:"
        # Add script to analyze performance metrics
        
  deploy:
    runs-on: ubuntu-latest
    needs: [test, code-coverage, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Build JAR
      run: mvn clean package -DskipTests
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/cudagame-ci-1.0.0.jar
        asset_name: cudagame-ci-${{ github.run_number }}.jar
        asset_content_type: application/java-archive
